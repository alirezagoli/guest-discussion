/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ir.ac.iut.sccportal.guestdiscussion.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ir.ac.iut.sccportal.guestdiscussion.model.Title;
import ir.ac.iut.sccportal.guestdiscussion.model.TitleModel;
import ir.ac.iut.sccportal.guestdiscussion.model.TitleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Title service. Represents a row in the &quot;GDP_Title&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ir.ac.iut.sccportal.guestdiscussion.model.TitleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TitleImpl}.
 * </p>
 *
 * @author Alireza
 * @see TitleImpl
 * @see ir.ac.iut.sccportal.guestdiscussion.model.Title
 * @see ir.ac.iut.sccportal.guestdiscussion.model.TitleModel
 * @generated
 */
@JSON(strict = true)
public class TitleModelImpl extends BaseModelImpl<Title> implements TitleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a title model instance should use the {@link ir.ac.iut.sccportal.guestdiscussion.model.Title} interface instead.
	 */
	public static final String TABLE_NAME = "GDP_Title";
	public static final Object[][] TABLE_COLUMNS = {
			{ "titleId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "titleText", Types.VARCHAR },
			{ "newCommentDraft", Types.VARCHAR },
			{ "answerCommentDraft", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GDP_Title (titleId LONG not null primary key IDENTITY,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,titleText VARCHAR(1000) null,newCommentDraft TEXT null,answerCommentDraft TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table GDP_Title";
	public static final String ORDER_BY_JPQL = " ORDER BY title.titleId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY GDP_Title.titleId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.ir.ac.iut.sccportal.guestdiscussion.model.Title"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.ir.ac.iut.sccportal.guestdiscussion.model.Title"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.ir.ac.iut.sccportal.guestdiscussion.model.Title"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long TITLEID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Title toModel(TitleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Title model = new TitleImpl();

		model.setTitleId(soapModel.getTitleId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setTitleText(soapModel.getTitleText());
		model.setNewCommentDraft(soapModel.getNewCommentDraft());
		model.setAnswerCommentDraft(soapModel.getAnswerCommentDraft());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Title> toModels(TitleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Title> models = new ArrayList<Title>(soapModels.length);

		for (TitleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.ir.ac.iut.sccportal.guestdiscussion.model.Title"));

	public TitleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _titleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTitleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _titleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Title.class;
	}

	@Override
	public String getModelClassName() {
		return Title.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("titleId", getTitleId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("titleText", getTitleText());
		attributes.put("newCommentDraft", getNewCommentDraft());
		attributes.put("answerCommentDraft", getAnswerCommentDraft());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long titleId = (Long)attributes.get("titleId");

		if (titleId != null) {
			setTitleId(titleId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String titleText = (String)attributes.get("titleText");

		if (titleText != null) {
			setTitleText(titleText);
		}

		String newCommentDraft = (String)attributes.get("newCommentDraft");

		if (newCommentDraft != null) {
			setNewCommentDraft(newCommentDraft);
		}

		String answerCommentDraft = (String)attributes.get("answerCommentDraft");

		if (answerCommentDraft != null) {
			setAnswerCommentDraft(answerCommentDraft);
		}
	}

	@JSON
	@Override
	public long getTitleId() {
		return _titleId;
	}

	@Override
	public void setTitleId(long titleId) {
		_columnBitmask = -1L;

		_titleId = titleId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getTitleText() {
		if (_titleText == null) {
			return StringPool.BLANK;
		}
		else {
			return _titleText;
		}
	}

	@Override
	public void setTitleText(String titleText) {
		_titleText = titleText;
	}

	@JSON
	@Override
	public String getNewCommentDraft() {
		if (_newCommentDraft == null) {
			return StringPool.BLANK;
		}
		else {
			return _newCommentDraft;
		}
	}

	@Override
	public void setNewCommentDraft(String newCommentDraft) {
		_newCommentDraft = newCommentDraft;
	}

	@JSON
	@Override
	public String getAnswerCommentDraft() {
		if (_answerCommentDraft == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerCommentDraft;
		}
	}

	@Override
	public void setAnswerCommentDraft(String answerCommentDraft) {
		_answerCommentDraft = answerCommentDraft;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Title.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Title toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Title)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TitleImpl titleImpl = new TitleImpl();

		titleImpl.setTitleId(getTitleId());
		titleImpl.setGroupId(getGroupId());
		titleImpl.setCompanyId(getCompanyId());
		titleImpl.setUserId(getUserId());
		titleImpl.setUserName(getUserName());
		titleImpl.setCreateDate(getCreateDate());
		titleImpl.setTitleText(getTitleText());
		titleImpl.setNewCommentDraft(getNewCommentDraft());
		titleImpl.setAnswerCommentDraft(getAnswerCommentDraft());

		titleImpl.resetOriginalValues();

		return titleImpl;
	}

	@Override
	public int compareTo(Title title) {
		int value = 0;

		if (getTitleId() < title.getTitleId()) {
			value = -1;
		}
		else if (getTitleId() > title.getTitleId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Title)) {
			return false;
		}

		Title title = (Title)obj;

		long primaryKey = title.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TitleModelImpl titleModelImpl = this;

		titleModelImpl._originalCompanyId = titleModelImpl._companyId;

		titleModelImpl._setOriginalCompanyId = false;

		titleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Title> toCacheModel() {
		TitleCacheModel titleCacheModel = new TitleCacheModel();

		titleCacheModel.titleId = getTitleId();

		titleCacheModel.groupId = getGroupId();

		titleCacheModel.companyId = getCompanyId();

		titleCacheModel.userId = getUserId();

		titleCacheModel.userName = getUserName();

		String userName = titleCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			titleCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			titleCacheModel.createDate = createDate.getTime();
		}
		else {
			titleCacheModel.createDate = Long.MIN_VALUE;
		}

		titleCacheModel.titleText = getTitleText();

		String titleText = titleCacheModel.titleText;

		if ((titleText != null) && (titleText.length() == 0)) {
			titleCacheModel.titleText = null;
		}

		titleCacheModel.newCommentDraft = getNewCommentDraft();

		String newCommentDraft = titleCacheModel.newCommentDraft;

		if ((newCommentDraft != null) && (newCommentDraft.length() == 0)) {
			titleCacheModel.newCommentDraft = null;
		}

		titleCacheModel.answerCommentDraft = getAnswerCommentDraft();

		String answerCommentDraft = titleCacheModel.answerCommentDraft;

		if ((answerCommentDraft != null) && (answerCommentDraft.length() == 0)) {
			titleCacheModel.answerCommentDraft = null;
		}

		return titleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{titleId=");
		sb.append(getTitleId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", titleText=");
		sb.append(getTitleText());
		sb.append(", newCommentDraft=");
		sb.append(getNewCommentDraft());
		sb.append(", answerCommentDraft=");
		sb.append(getAnswerCommentDraft());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("ir.ac.iut.sccportal.guestdiscussion.model.Title");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>titleId</column-name><column-value><![CDATA[");
		sb.append(getTitleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleText</column-name><column-value><![CDATA[");
		sb.append(getTitleText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newCommentDraft</column-name><column-value><![CDATA[");
		sb.append(getNewCommentDraft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerCommentDraft</column-name><column-value><![CDATA[");
		sb.append(getAnswerCommentDraft());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Title.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Title.class };
	private long _titleId;
	private long _groupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private String _titleText;
	private String _newCommentDraft;
	private String _answerCommentDraft;
	private long _columnBitmask;
	private Title _escapedModel;
}