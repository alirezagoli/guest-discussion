/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ir.ac.iut.sccportal.guestdiscussion.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle;
import ir.ac.iut.sccportal.guestdiscussion.model.PortletTitleModel;
import ir.ac.iut.sccportal.guestdiscussion.model.PortletTitleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PortletTitle service. Represents a row in the &quot;GDP_PortletTitle&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ir.ac.iut.sccportal.guestdiscussion.model.PortletTitleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortletTitleImpl}.
 * </p>
 *
 * @author Alireza
 * @see PortletTitleImpl
 * @see ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle
 * @see ir.ac.iut.sccportal.guestdiscussion.model.PortletTitleModel
 * @generated
 */
@JSON(strict = true)
public class PortletTitleModelImpl extends BaseModelImpl<PortletTitle>
	implements PortletTitleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a portlet title model instance should use the {@link ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle} interface instead.
	 */
	public static final String TABLE_NAME = "GDP_PortletTitle";
	public static final Object[][] TABLE_COLUMNS = {
			{ "portletId", Types.VARCHAR },
			{ "titleId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table GDP_PortletTitle (portletId VARCHAR(75) not null primary key,titleId LONG)";
	public static final String TABLE_SQL_DROP = "drop table GDP_PortletTitle";
	public static final String ORDER_BY_JPQL = " ORDER BY portletTitle.portletId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GDP_PortletTitle.portletId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle"),
			true);
	public static long TITLEID_COLUMN_BITMASK = 1L;
	public static long PORTLETID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PortletTitle toModel(PortletTitleSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PortletTitle model = new PortletTitleImpl();

		model.setPortletId(soapModel.getPortletId());
		model.setTitleId(soapModel.getTitleId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PortletTitle> toModels(PortletTitleSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PortletTitle> models = new ArrayList<PortletTitle>(soapModels.length);

		for (PortletTitleSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle"));

	public PortletTitleModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _portletId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setPortletId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _portletId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return PortletTitle.class;
	}

	@Override
	public String getModelClassName() {
		return PortletTitle.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("portletId", getPortletId());
		attributes.put("titleId", getTitleId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String portletId = (String)attributes.get("portletId");

		if (portletId != null) {
			setPortletId(portletId);
		}

		Long titleId = (Long)attributes.get("titleId");

		if (titleId != null) {
			setTitleId(titleId);
		}
	}

	@JSON
	@Override
	public String getPortletId() {
		if (_portletId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletId;
		}
	}

	@Override
	public void setPortletId(String portletId) {
		_portletId = portletId;
	}

	@JSON
	@Override
	public long getTitleId() {
		return _titleId;
	}

	@Override
	public void setTitleId(long titleId) {
		_columnBitmask |= TITLEID_COLUMN_BITMASK;

		if (!_setOriginalTitleId) {
			_setOriginalTitleId = true;

			_originalTitleId = _titleId;
		}

		_titleId = titleId;
	}

	public long getOriginalTitleId() {
		return _originalTitleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public PortletTitle toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PortletTitle)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortletTitleImpl portletTitleImpl = new PortletTitleImpl();

		portletTitleImpl.setPortletId(getPortletId());
		portletTitleImpl.setTitleId(getTitleId());

		portletTitleImpl.resetOriginalValues();

		return portletTitleImpl;
	}

	@Override
	public int compareTo(PortletTitle portletTitle) {
		String primaryKey = portletTitle.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PortletTitle)) {
			return false;
		}

		PortletTitle portletTitle = (PortletTitle)obj;

		String primaryKey = portletTitle.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		PortletTitleModelImpl portletTitleModelImpl = this;

		portletTitleModelImpl._originalTitleId = portletTitleModelImpl._titleId;

		portletTitleModelImpl._setOriginalTitleId = false;

		portletTitleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PortletTitle> toCacheModel() {
		PortletTitleCacheModel portletTitleCacheModel = new PortletTitleCacheModel();

		portletTitleCacheModel.portletId = getPortletId();

		String portletId = portletTitleCacheModel.portletId;

		if ((portletId != null) && (portletId.length() == 0)) {
			portletTitleCacheModel.portletId = null;
		}

		portletTitleCacheModel.titleId = getTitleId();

		return portletTitleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{portletId=");
		sb.append(getPortletId());
		sb.append(", titleId=");
		sb.append(getTitleId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("ir.ac.iut.sccportal.guestdiscussion.model.PortletTitle");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>portletId</column-name><column-value><![CDATA[");
		sb.append(getPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titleId</column-name><column-value><![CDATA[");
		sb.append(getTitleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortletTitle.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PortletTitle.class
		};
	private String _portletId;
	private long _titleId;
	private long _originalTitleId;
	private boolean _setOriginalTitleId;
	private long _columnBitmask;
	private PortletTitle _escapedModel;
}